const fs = require('fs').promises;
const path = require('path');
const ragService = require('../utils/ragService');

async function backupRAGSystem() {
  console.log('üíæ Iniciando backup do sistema RAG...\n');
  
  try {
    await ragService.initialize();
    
    // Obter dados para backup
    const stats = await ragService.getStats();
    const exportData = await ragService.vectorStore.exportData();
    
    // Criar pasta de backup com timestamp
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupDir = path.join(__dirname, '..', 'backups', `rag_backup_${timestamp}`);
    
    await fs.mkdir(backupDir, { recursive: true });
    
    // Salvar dados
    await fs.writeFile(
      path.join(backupDir, 'rag_data.json'),
      JSON.stringify(exportData, null, 2)
    );
    
    // Salvar estat√≠sticas
    await fs.writeFile(
      path.join(backupDir, 'stats.json'),
      JSON.stringify(stats, null, 2)
    );
    
    // Copiar arquivos de configura√ß√£o se existirem
    const configFiles = ['package.json', '.env'];
    for (const configFile of configFiles) {
      try {
        const sourcePath = path.join(__dirname, '..', configFile);
        const destPath = path.join(backupDir, configFile);
        await fs.copyFile(sourcePath, destPath);
      } catch (error) {
        console.log(`‚ö†Ô∏è Arquivo ${configFile} n√£o encontrado, pulando...`);
      }
    }
    
    // Criar README do backup
    const readmeContent = `# Backup do Sistema RAG

**Data do Backup:** ${new Date().toLocaleString()}
**Total de Documentos:** ${stats.totalDocuments}
**Total de Embeddings:** ${stats.totalEmbeddings}

## Conte√∫do do Backup

- \`rag_data.json\`: Dados completos do sistema RAG
- \`stats.json\`: Estat√≠sticas do sistema
- \`package.json\`: Depend√™ncias do projeto
- \`.env\`: Vari√°veis de ambiente (se existir)

## Como Restaurar

1. Certifique-se de que o sistema RAG est√° inicializado
2. Execute o script de restaura√ß√£o apontando para este diret√≥rio
3. O sistema ser√° restaurado com todos os documentos e embeddings

## Comando de Restaura√ß√£o

\`\`\`bash
node scripts/restoreRAG.js "${backupDir}"
\`\`\`
`;
    
    await fs.writeFile(
      path.join(backupDir, 'README.md'),
      readmeContent
    );
    
    console.log('‚úÖ Backup conclu√≠do com sucesso!');
    console.log(`üìÅ Local: ${backupDir}`);
    console.log(`üìä Documentos salvos: ${stats.totalDocuments}`);
    console.log(`üî¢ Embeddings salvos: ${stats.totalEmbeddings}`);
    
    return backupDir;
    
  } catch (error) {
    console.error('‚ùå Erro durante o backup:', error);
    throw error;
  }
}

async function restoreRAGSystem(backupPath) {
  console.log(`üîÑ Restaurando sistema RAG de: ${backupPath}\n`);
  
  try {
    await ragService.initialize();
    
    // Verificar se o backup existe
    const dataFile = path.join(backupPath, 'rag_data.json');
    const backupData = JSON.parse(await fs.readFile(dataFile, 'utf-8'));
    
    // Confirmar restaura√ß√£o
    console.log(`üìä Backup cont√©m:`);
    console.log(`   - ${backupData.documents?.length || 0} documentos`);
    console.log(`   - ${backupData.embeddings?.length || 0} embeddings`);
    console.log(`   - Criado em: ${backupData.exportedAt}`);
    
    // Limpar dados atuais
    await ragService.clearAll();
    console.log('üßπ Dados atuais limpos');
    
    // Importar dados do backup
    await ragService.vectorStore.importData(backupData);
    console.log('üì• Dados do backup importados');
    
    // Verificar resultado
    const newStats = await ragService.getStats();
    console.log('\n‚úÖ Restaura√ß√£o conclu√≠da!');
    console.log(`üìä Documentos restaurados: ${newStats.totalDocuments}`);
    console.log(`üî¢ Embeddings restaurados: ${newStats.totalEmbeddings}`);
    
  } catch (error) {
    console.error('‚ùå Erro durante a restaura√ß√£o:', error);
    throw error;
  }
}

// Executa se chamado diretamente
if (require.main === module) {
  const command = process.argv[2];
  const path = process.argv[3];
  
  if (command === 'backup') {
    backupRAGSystem().then((backupPath) => {
      console.log(`\n‚ú® Backup salvo em: ${backupPath}`);
      process.exit(0);
    }).catch(error => {
      console.error('‚ùå Falha no backup:', error);
      process.exit(1);
    });
  } else if (command === 'restore' && path) {
    restoreRAGSystem(path).then(() => {
      console.log('\n‚ú® Restaura√ß√£o conclu√≠da!');
      process.exit(0);
    }).catch(error => {
      console.error('‚ùå Falha na restaura√ß√£o:', error);
      process.exit(1);
    });
  } else {
    console.log('Uso:');
    console.log('  node backupRAG.js backup          - Criar backup');
    console.log('  node backupRAG.js restore <path>  - Restaurar backup');
  }
}

module.exports = { backupRAGSystem, restoreRAGSystem };
